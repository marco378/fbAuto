/**
 * FB Auto - Cookie-Based Authentication Bookmarklet
 * Sends authentication token as cookies instead of headers
 */

// COOKIE-BASED BOOKMARKLET - Copy this entire line:
javascript:(function(){if(window.fbAutoWorking){alert('FB Auto already running!');return;}window.fbAutoWorking=true;const CONFIG={apiBaseUrl:'https://fbauto-production-4368.up.railway.app/api',pollingInterval:30000,tokenRefreshInterval:24*60*60*1000,currentToken:null};const log=(message,type='info')=>{const timestamp=new Date().toISOString().substr(11,8);console.log(`üöÄ [${timestamp}] FB Auto: ${message}`);updateStatusIndicator(message,type);};const createStatusIndicator=()=>{if(document.getElementById('fb-auto-working'))return;const indicator=document.createElement('div');indicator.id='fb-auto-working';indicator.style.cssText='position:fixed;top:10px;right:10px;background:#4CAF50;color:white;padding:12px 16px;border-radius:25px;font-size:14px;z-index:999999;box-shadow:0 4px 12px rgba(0,0,0,0.4);font-family:Arial,sans-serif;font-weight:bold;';indicator.innerHTML='üöÄ FB Auto: Starting...';document.body.appendChild(indicator);};const updateStatusIndicator=(message,type='info')=>{const indicator=document.getElementById('fb-auto-working');if(!indicator)return;const colors={info:'#2196F3',success:'#4CAF50',warning:'#FF9800',error:'#F44336'};const icons={info:'‚ÑπÔ∏è',success:'‚úÖ',warning:'‚ö†Ô∏è',error:'‚ùå'};indicator.style.background=colors[type]||colors.info;indicator.innerHTML=`${icons[type]||'üöÄ'} ${message}`;};const setCookieForAPI=async(token)=>{try{document.cookie=`token=${token}; domain=.railway.app; path=/; secure; samesite=none; max-age=${30*24*60*60}`;log('Set cookie for railway.app domain','success');document.cookie=`fbAutoToken=${token}; domain=.facebook.com; path=/; secure; samesite=none; max-age=${30*24*60*60}`;log('Set backup cookie for facebook.com domain','info');}catch(error){log(`Cookie setting failed: ${error.message}`,'warning');}};const getFreshToken=async()=>{try{log('Getting fresh authentication token...','info');const response=await fetch(`${CONFIG.apiBaseUrl}/token/generate-bookmarklet`,{method:'GET',mode:'cors',credentials:'include',headers:{'Content-Type':'application/json','Accept':'application/json'}});if(!response.ok){throw new Error(`Token generation failed: ${response.status}`);}const data=await response.json();CONFIG.currentToken=data.token;localStorage.setItem('fbAutoToken',data.token);localStorage.setItem('fbAutoTokenExpiry',Date.now()+30*24*60*60*1000);await setCookieForAPI(data.token);log('Fresh token obtained and set as cookie','success');return data.token;}catch(error){log(`Failed to get fresh token: ${error.message}`,'error');throw error;}};const validateCurrentToken=async(token)=>{if(!token)return false;try{await setCookieForAPI(token);const response=await fetch(`${CONFIG.apiBaseUrl}/token/validate`,{method:'GET',mode:'cors',credentials:'include',headers:{'Content-Type':'application/json'}});if(response.ok){const data=await response.json();return data.valid;}return false;}catch(error){log(`Token validation failed: ${error.message}`,'warning');return false;}};const getValidToken=async()=>{let token=CONFIG.currentToken||localStorage.getItem('fbAutoToken');const tokenExpiry=localStorage.getItem('fbAutoTokenExpiry');if(token&&tokenExpiry&&Date.now()<parseInt(tokenExpiry)){log('Using cached token','info');const isValid=await validateCurrentToken(token);if(isValid){CONFIG.currentToken=token;return token;}log('Cached token is invalid','warning');}log('Need fresh token','info');return await getFreshToken();};const makeAPICall=async(endpoint,options={})=>{const url=`${CONFIG.apiBaseUrl}${endpoint}`;log(`Making API call to: ${endpoint}`);let token;try{token=await getValidToken();}catch(error){log('Failed to get valid token','error');return{error:'Authentication failed',jobs:[]};}await setCookieForAPI(token);const requestOptions={method:'GET',mode:'cors',credentials:'include',headers:{'Content-Type':'application/json','Accept':'application/json','X-Requested-With':'XMLHttpRequest'},...options};try{const response=await fetch(url,requestOptions);log(`Response status: ${response.status}`);if(!response.ok){if(response.status===401||response.status===403){log('Token expired during request, getting fresh token','warning');try{token=await getFreshToken();const retryResponse=await fetch(url,requestOptions);if(!retryResponse.ok){const errorText=await retryResponse.text();log(`Retry failed: ${retryResponse.status} - ${errorText}`,'error');return{error:errorText,jobs:[]};}const retryData=await retryResponse.json();log(`Retry successful: ${endpoint}`,'success');return retryData;}catch(retryError){log(`Token refresh failed: ${retryError.message}`,'error');return{error:'Authentication failed after retry',jobs:[]};}}const errorText=await response.text();log(`API Error: ${response.status} - ${errorText}`,'error');return{error:errorText,jobs:[]};}const data=await response.json();log(`API Success: ${endpoint} returned ${data.jobs?.length||0} jobs`,'success');return data;}catch(error){log(`API call failed: ${error.message}`,'error');return{error:error.message,jobs:[]};}};const fetchPendingJobs=async()=>{const data=await makeAPICall('/jobs/client-automation');return data.jobs||[];};const updateJobStatus=async(jobId,groupName,status,postUrl=null,error=null)=>{try{await makeAPICall(`/jobs/${jobId}/update-posting-status`,{method:'POST',body:JSON.stringify({facebookGroup:groupName,status,postUrl,error})});log(`Status updated: ${groupName} = ${status}`);}catch(error){log(`Failed to update status: ${error.message}`,'error');}};const sleep=ms=>new Promise(resolve=>setTimeout(resolve,ms));const isVisible=element=>{if(!element)return false;const style=window.getComputedStyle(element);return style.display!=='none'&&style.visibility!=='hidden'&&style.opacity!=='0'&&element.offsetWidth>0&&element.offsetHeight>0;};const findPostComposer=()=>{const selectors=['[data-testid="status-attachment-mentions-input"]','[role="textbox"][data-testid]','[contenteditable="true"][role="textbox"]','textarea[placeholder*="mind"]','[contenteditable="true"]','[data-testid="react-composer-input"]'];for(const selector of selectors){const element=document.querySelector(selector);if(element&&isVisible(element)){log(`Found composer: ${selector}`);return element;}}log('No composer found - try clicking "What\'s on your mind?" first','warning');return null;};const findPostButton=()=>{const selectors=['[data-testid="react-composer-post-button"]','[aria-label="Post"]','button[type="submit"]','[data-testid="composer-post-button"]'];for(const selector of selectors){const elements=document.querySelectorAll(selector);for(const element of elements){if((element.textContent.toLowerCase().includes('post')||element.getAttribute('aria-label')==='Post')&&isVisible(element)){log(`Found post button: ${selector}`);return element;}}}log('No post button found','warning');return null;};const formatJobPost=job=>{return`üî• ${job.title}\nüè¢ ${job.company}\n\nüìç Location: ${job.location}\nüíº Job Type: ${job.jobType}\n${job.salaryRange?`üí∞ Salary: ${job.salaryRange}\n`:''}\nüìù Description:\n${job.description.trim()}\n${job.requirements?.length?`\n‚úÖ Requirements:\n${job.requirements.map(r=>`‚Ä¢ ${r.trim()}`).join('\n')}\n`:''}${job.responsibilities?.length?`\nüéØ Key Responsibilities:\n${job.responsibilities.map(r=>`‚Ä¢ ${r.trim()}`).join('\n')}\n`:''}\nüí¨ Interested? Comment below or send me a message!\n\n#hiring #jobs #career #opportunity`;};const simulateTyping=async(element,text)=>{element.focus();await sleep(100);for(let i=0;i<text.length;i++){const char=text[i];if(element.tagName==='TEXTAREA'||element.tagName==='INPUT'){element.value+=char;}else{element.textContent+=char;}element.dispatchEvent(new InputEvent('input',{inputType:'insertText',data:char,bubbles:true}));await sleep(50);}element.dispatchEvent(new Event('change',{bubbles:true}));};const postToGroup=async(job,groupName)=>{try{log(`Posting ${job.title} to ${groupName}...`,'info');updateStatusIndicator(`Posting to ${groupName}...`,'info');if(!window.location.hostname.includes('facebook.com')){throw new Error('Please navigate to Facebook.com first');}await sleep(1000);let composer=findPostComposer();if(!composer){log('Composer not found. Please click "What\'s on your mind?" first','warning');updateStatusIndicator('Click "What\'s on your mind?" first','warning');return{success:false,error:'Composer not found'};}const postContent=formatJobPost(job);log('Filling in post content...','info');if(composer.tagName==='TEXTAREA'){composer.value='';composer.focus();await sleep(500);composer.value=postContent;composer.dispatchEvent(new Event('input',{bubbles:true}));composer.dispatchEvent(new Event('change',{bubbles:true}));}else{composer.textContent='';await simulateTyping(composer,postContent);}await sleep(2000);const userConfirmed=confirm(`Ready to post job "${job.title}" to group "${groupName}"?\n\nContent preview:\n${postContent.substring(0,200)}...\n\nClick OK to continue with posting.`);if(!userConfirmed){throw new Error('User cancelled posting');}const postButton=findPostButton();if(!postButton){const manualPost=confirm('Post button not found automatically.\n\nPlease click the POST button manually, then click OK here.\n\nClick OK after you\'ve posted, Cancel to mark as failed.');if(!manualPost){throw new Error('Manual posting cancelled');}log('User completed manual posting','success');}else{log('Clicking post button...','info');postButton.click();await sleep(2000);}log(`‚úÖ Posted to ${groupName}`,'success');updateStatusIndicator(`‚úÖ Posted to ${groupName}`,'success');await updateJobStatus(job.id,groupName,'SUCCESS',window.location.href);return{success:true};}catch(error){log(`‚ùå Failed: ${groupName} - ${error.message}`,'error');updateStatusIndicator(`‚ùå Failed: ${groupName}`,'error');await updateJobStatus(job.id,groupName,'FAILED',null,error.message);return{success:false,error:error.message};}};const processJobs=async(jobs)=>{if(!jobs||jobs.length===0){updateStatusIndicator('No jobs found','info');log('No pending jobs found','info');setTimeout(()=>{updateStatusIndicator('Ready for jobs','info');},3000);return{processed:0,successful:0};}let successful=0;const totalPosts=jobs.reduce((acc,job)=>acc+job.pendingGroups.length,0);log(`Processing ${jobs.length} jobs (${totalPosts} posts)`,'info');updateStatusIndicator(`Processing ${jobs.length} jobs...`,'info');for(const job of jobs){log(`Processing job: ${job.title}`,'info');for(const groupName of job.pendingGroups){const result=await postToGroup(job,groupName);if(result.success)successful++;await sleep(10000);}}const successRate=totalPosts>0?((successful/totalPosts)*100).toFixed(1):0;log(`Completed: ${successful}/${totalPosts} posts (${successRate}% success)`,'success');updateStatusIndicator(`Done: ${successful}/${totalPosts} posted`,'success');return{processed:totalPosts,successful};};const runOnce=async()=>{try{updateStatusIndicator('Initializing...','info');log('üç™ Setting up cookie authentication...','info');await getValidToken();updateStatusIndicator('Checking for jobs...','info');log('üìã Fetching pending jobs from API...','info');const jobs=await fetchPendingJobs();if(jobs&&jobs.length>0){log(`Found ${jobs.length} jobs ready for posting`,'success');updateStatusIndicator(`Found ${jobs.length} jobs`,'success');await processJobs(jobs);}else{log('No pending jobs found','info');updateStatusIndicator('No jobs to post','info');}}catch(error){log(`Automation error: ${error.message}`,'error');updateStatusIndicator('Automation failed','error');}setTimeout(()=>{window.fbAutoWorking=false;log('Automation cycle complete','info');},10000);};const startAutomation=()=>{log('üöÄ FB Auto started (cookie-based authentication)','success');createStatusIndicator();updateStatusIndicator('Initializing...','info');if(window.location.hostname.includes('facebook.com')){log('On Facebook - starting cookie-based automation','success');runOnce();}else{updateStatusIndicator('Go to Facebook.com first','warning');log('Not on Facebook - please navigate to facebook.com first','warning');}};startAutomation();})();